
/*
0. 借用和生命周期

12.1 生命周期

12.2 借用(p133~134[*])
    a. 借用指针(borrow pointer)的语法使用 & 或 &mut 符号分别表示只读、可读写借用.
       借用指针亦称为"引用(reference)"其对所指向的内存区域没有所有权
    b. mut 修饰变量名则代表变量可被重新绑定；mut 修饰"借用指针 & "则代表其所指向
       的对象可以被修改
    c. 借用指针在编译后实际上就是一个普通指针，其意义体现于编译阶段的静态检查

*/
fn main_0() {
    let mut var = 0_i32;
    {
        // " p1 "指针未使用 mut 修改故本身不能被重新绑定
        // " &var "使用 mut 修饰表示其所指向的数据可被修改
        let p1 = &mut var;
        *p1 = 1;
    }
    println!("{}", var);
    {
        // " p2 "指针使用 mut 修饰表示其本身能被重新绑定
        // " &var "未使用 mut 修饰表示其所指向的数据不可被改变
        let mut p2 = &var;
        // *p2 = 2; // 飘红报错(未使用 mut 修饰表示其所指向的数据不可被改变)
        // 重新绑定
        let temp = 2_i32;
        p2 = &temp;
    }
    {
        // " p3 "指针使用 mut 修饰表示其本身能被重新绑定
        // " &var "使用 mut 修饰表示其所指向的数据可被改变
        let mut p3 = &mut var;
        *p3 = 3;
        // 重新绑定
        let mut temp = 3_i32;
        p3 = &mut temp;
    }
    println!("{}", var);
}

/*
12.3 借用规则(p134-136[*])
    a. &mut 型借用只能指向本身具有 mut 修饰的变量，对于只读变量不可有 &mut 型借用
    b. 任何借用指针的存在都会导致原来的变量被"冻结(Frozen)"

12.4 生命周期标记

12.4.1 函数的生命周期标记(p136~138[*])
    (类比泛型类型参数)生命周期标记亦需先声明后使用

12.4.2 类型的生命周期标记
    若自定义类型中有成员包含生命周期参数则此自定义类型亦必须有生命周期参数

12.5 省略生命周期标记
     a. 生命周期省略规则(lifetime elision rules)
     b. 省略 与 推断 区别 ( elision != inference )
        省略生命周期参数和类型自动推导原理完全不同

*/