
/*
0. 借用检查(p141[*])
   a. 共享不可变，可变不共享
   b. Alias 和 Mutation 概念
      (0). alias : 别名(意味着"共享")
      (1). mutation：改变(意味着"修改")

13.1 编译错误示例(p142[*])
    a. 参阅网址:" https://doc.rust-lang.org/error-index.html "
    b. 遵循法则:" 共享不可变，可变不共享 "(主要关注"共享"与"可变"之间的关系)
    c. &mut 型借用常被称作"独占指针"，& 型借用常被称作" 共享指针 "

13.2 内存不安全示例：修改枚举(p143~144[?])

13.3 内存不安全示例: 迭代器失效(p144~146[?])
    a. 在遍历一个数据结构的过程中修改这个数据结构，会导致迭代器失效
    b. 在 Rust 中 for 循环实质上是生成了一个迭代器，它一直持有一个指向容器的
       引用，在迭代器的生命周期内，任何对容器的修改都无法编译通过

13.4 内存不安全示例：悬空指针(p146~148[*])

*/