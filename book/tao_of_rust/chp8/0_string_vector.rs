
/*
0. 字符串与集合类型
   程序中最常用的三大数据结构是字符串、数组和映射：字符串是特殊的线性表，
   是由零个或多个字符组成的有限序列

8.1.3 字符串分类
    字符串是由字符组成的有限序列。字符可用整数值直接表示 Unicode 标量值而
    字符串却不能，因为字符串大小不确定。出于安全考虑可分为以下几种类型:
    (1) str：表示固定长度的字符串
    (2) String：表示可增长的字符串
    (3) CStr
    (4) CString
    (5) OsStr
    (6) OsString
    (7) Path
    (8) PathBuf
    // 注: str 属于动态大小类型(DST)，在编译期并不能确定其大小，故在程序中
       最常见到的是 str 的切片(slice)类型 &str (其代表的是不可变的 UTF-8
       字节序列，创建后无法修改其内容)
    // 注 ：String 类型由三部分组成( 指向堆中字节序列的指针["as_ptr"方法]、
       记录堆中字节序列的字节长度["len"方法]及堆分配的容量["capacity"方法])
    // 通过 String::from 方法使用字符串字面量作为参数创建字符串(因为 String
       类型实现了 From trati )

8.1.4 字符串的两种处理方式
    Rust 提供了 bytes 和 chars 两个方法来分别返回按字节和按字符迭代的迭代器
    a. 按字节处理
    b. 按字符处理

8.1.5 字符串的修改(p253[*])
    追加字符串
    插入字符串
    连接字符串
    更新字符串
    删除字符串

8.1.6 字符串查找(p256[*])
    存在性判断
    位置匹配
    分割字符串
    捕获匹配
    删除匹配
    替代匹配
    字符串匹配模式原理(p261[*])

8.1.7 字符串与其它类型相互转换
    字符串转为其它类型
    其它类型转为字符串

8.2 集合类型
    Rust 标准库提供的集合类型包括以下几种
    Vec<T>
    VecDeque<T>
    LinkedList<T>
    BinaryHeap<T>
    HashMap<K,V>
    BTreeMap<K,V>
    HashSet<T>
    BTreeSet<T>
    // 其中最常用的集合为" Vec<T> 和 HashMap<K,V> "

8.2.1 动态可增长数组
    a. Rust 中数组有两种类型：一种是原生类型 array，拥有固定长度，类型签名为" [T;N] ";
       另一种为可增长的动态数组 Vector，类型签名为" Vec<T> "，在运行时才可知晓大小。
    b. array、Vector 区别在于 array 中元素可存储于栈上而 Vector 中的元素只能存储于堆上
    c. 创建 Vector 类比创建 String 类型字符串 (String 类型本就是对 Vec<u8> 类型的包装)
    d. 与排序相关的 trait (p276[?])
        PartialOrd 对应偏序
        Ord 对应全序

8.2.2 映射集
    a. Entry 模式
    b. HashMap 底层实现原理
    (p284[*])

8.3 理解容量

8.4 小结(p292[*])

*/