
// prologue[ˈprəʊlɒɡ]n. 序言      // rasyberry[ˈrɑːzbəri]n.树莓
/*
0. 术语
    a. 垃圾回收(Garbage Collection)
    b. 零开销抽象(Zero-Cost Abstraction)
    c. 树莓派(Rasyberry Pi ):
       简写为" RPi / RasPi "，是一款基于 ARM 的微型电脑主板

1. 阅读
   第 2 章、第 12 章及第 20 章属于项目实践类章节，其余章节属于概念讨论类章节。

2. 具体章节
    a. 第一章：介绍如何安装 Rust
    b. 第二章： Rust 语言的实战介绍
    c. 第三章：介绍 Rust 中类似其他编程语言中的功能
    d. 第四章：关于 Rust 所有权系统内容
    e. 第五章：讨论结构体和方法
    f. 第六章：介绍枚举、match 表达式和 if let 控制流结构
    g. 第七章:  Rust 模块系统和私有性规则及使用其组织代码和设计 API
    h. 第八章：讨论一些标准库提供的常见集合数据结构
               如" Vec(动态数组)、String(字符串)及 HashMap(哈希表) "
    i. 第九章：讨论 Rust 中关于错误处理的一些设计理念和工具
    j. 第十章：深入讲解泛型、trait(特征)和生命周期概念，它们赋予复用代码的能力
    k. 第十一章：关于构建测试系统内容(即使 Rust 有安全检查也需测试确保业务逻辑正确）
    l. 第十二章：实现命令行工具 grep 的一些功能子集，用于在文件中搜索某些特定文本
    m. 第十三章：讨论 Rust 中与函数式编程相关的概念(闭包和迭代器)
    n. 第十四章：更深层次的理解 Cargo 并讨论与他人共享代码库的一些最佳实践
    o. 第十五章：讨论标准库提供的智能指针及其所实现的相关 trait
    p. 第十六章：学习不同的并发编程模型并讨论 Rust 无畏并发
    q. 第十七章：着眼于比较 Rust 与常见的面向对象编程范式的不同风格
    r. 第十八章：介绍模式及模式匹配(给 Rust 带来异常强大的表达能力)
    s. 第十九章：高级主题(包括 unsafe Rust、宏、trait、类型、函数及闭包的更深入讨论)
    t. 第二十章: 从底层开始实现一个完整的多线程 Web 服务器
    u. 附录 A ：介绍 Rust 中全部的关键字
    v. 附录 B ：列举 Rust 所有的运算符及其他符号
    w. 附录 C ：介绍标准库提供的可派生 trait
    x. 附录 D ：介绍一些有用的开发工具
    y. 附录 E ：介绍 Rust 的不同版本机制

3. 推荐
   掌握如何阅读编译器显示的错误提示信息是一项尤为重要的能力(能指引编写出可用代码)

*/