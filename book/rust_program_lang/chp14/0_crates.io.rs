
/*
0. 进一步认识 Cargo 及 crates.io
    a. 使用发布配置来定制构建
    b. 将代码库发布到 crates.io 上
    c. 使用工作空间来组织更大的项目
    d. 下载安装 crates.io 提供的二进制文件
    e. 使用自定义命令来扩展 Cargo

1. 使用发布配置来定制构建

2. 将包发布到 crates.io 上(p392[*])
    a. 编写有用的文档注释
    b. 常用的文档注释区域
       " /// "用于注释紧随其后的条目
    c. 将文档注释用作测试
    d. 在条目内部编写注释
       " //! "可为包裹当前注释的外层条目(而不是紧随注释之后的条目)添加文档。
       如" //! "为包含这片注释的条目而编写(而不是为了紧随注释之后的条目编写)
       故" //! "通常被用在包(或模块)的根文件上,分别为整个包(或模块)提供文档

3. 使用 pub use 来导出合适的公共 API
    a. 重新导出操作会取得某个位置的公共条目并将其公开到另一个位置，就好像这个条目
       原来就定义在新位置一样。(使用 pub use 可将需公开的条目重新导出到顶层结构中)
    b. 使用 pub use 可在设计内部结构时拥有更大的灵活性，因其将内部结构与外部表现
       进行了解耦

4. 发布到 crates.io
    发布包的过程中务必谨慎，因为发布是永久性的。已经上传的版本将无法被覆盖，对应的
    代码也不能被删除(此设计用于保证所有依赖于 crates.io 的包都能一直被正常构建[若
    允许开发者删除已经发布的版本则无法保证)

5. Cargo 工作空间(p405[*])
    Cargo 提供工作空间(workspaces)功能可帮助管理多个相关联且需要协同开发的包

6. 使用 cargo install 从 crates.io 上安装可执行程序
   cargo install 命令可用于在计算机设备中安装和使用二进制包，意在方便 Rust 开发者们
   安装他人已经在"crates.io"上共享的工具(而非替换操作系统中的包管理器)。另外只能安装
   具有二进制目标文件的包。

*/