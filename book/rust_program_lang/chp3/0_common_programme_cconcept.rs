
// scalar[ˈskeɪlə(r)]n.标量   // compound[ˈkɒmpaʊnd]n.复合,混合
/*
0. 通用编程概念

1. 变量与常量之间的不同(p46[*])
   a. 不能用 mut 来修饰一个常量，常量不仅是默认不可变的，它还总是不可变的。
   b. 需使用 const 关键字(而非 let 关键字)且显式标注类型来声明常量
   c. 常量可被声明在任何作用域中，甚至包括全局作用域。这在一个值需要被不同
      部分的代码共同引用时非常有用
   d. 只能将常量绑定到一个常量表达式上，而无法将一个函数的返回值或其它需要
      在运行时计算的值绑定到常量上。
   e. 在 Rust 中约定俗成使用以下划线分隔的全大写字母来命名一个常量如下：
       " const MAX_POINT:i32 = 100_000; "

2. 隐藏(p47[*])
   隐藏(使用 let 将新声明的同名变量覆盖旧的同名变量)机制与 mut 的区别：如
        let x = 5;
        let x = x + 1;
        // x = x + 1;              // 未事先将 x 声明为 mut 则编译报错
   a. 隐藏不同于将变量声明为 mut
      若未使用 let 关键字的情况下重新为这个变量赋值则会导致编译错误。通过
      使用 let 可对这个值进行一系列变换操作并允许这个变量在操作完成后保持
      自己的不可变性
   b. 隐藏机制与 mut 的另一个区别在于：由于重复使用 let 关键字会创建出新
      的变量，故可以复用变量名称的同时改变它的类型。如
      let space = " ";
      // space = spaces.len(); // 编译错误(即使声明为 mut 其类型也不匹配)
      let space = spaces.len();
             // 使用隐藏机制避免诸如" spaces_str/spaces_num "之类的区分

3. 数据类型(p48[*])
    a. 不同数据类型子集：标量类型(scalar)和复合类型(compound)
    b. Rust 是一门静态类型语言，意味着在编译过程中需知晓变量的具体类型

4. 标量类型(p49[*])
    标量类型是单个值类型的统称(标量类型相对于"复合类型"[可包含多个值])而言
    Rust 中内建了 4 种基础的标量类型： "整数、浮点数、布尔值 及 字符"

5. 复合类型
    复合类型(compound type)可以将多个不同类型的值组合为一个类型。Rust 提供
    了两种内置的基础复合类型：元组(tuple)和数组(array)

6. 数组类型
    当欲在栈上而非堆上为数据分配空间或想要确保总有固定数量的元素时，数组是
    一个非常有用的工具；若不确定可选择使用" 动态数组(vector) "

7. 函数中的语句和表达式
   a. Rust 是一门基于表达式的语言，故其将语句(statement)与表达式(expression)
      区别为两个不同概念
   b. 语句指执行但不返回值的指令；表达式指进行计算并产生一个值作为结果的指令。

8. 使用循环重复执行代码(p74[*])
    a. Rust 提供了 3 种循环: " loop、While 和 for "
    b. 使用 loop 重复执行代码
    c. while 条件循环 : 简化" loop、if、else 及 break "的组合实现
    d. 使用 for 循环遍历 : 简化 while/(loop break组合) 条件遍历且增加安全性
       (for 循环的安全性和简洁性使其成为 Rust 中最为常用的循环结构)

*/