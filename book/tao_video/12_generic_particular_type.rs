
// phantom[ˈfæntəm]n.幽灵,幻影
/*
0. 泛型 : 所谓泛型就是"参数化类型"
    a. 定义泛型函数 foo : " fn foo<T>(x: T) -> T {} ", 其函数参数 x 的类型使用大写 T 表示泛型，其本质是
       把具体的类型给参数化，即是说" T "实际上是一种形式化类型参数，并非实际具体类型。只有在实际调用时才会
       传入具体类型
    b. 泛型也是一种抽象方式，但在 Rust 中是零成本的抽象，因为泛型会在编译期"单态化"，就是实际调用的位置会
       生成具体类型的相关代码，这也叫做静态分发。如 foo 函数" fn foo<T>(x: T) -> T {} "会在" foo(1) 及
       foo("hello") "调用位置静态分发为两个不同类型参数的函数
    c. turbofish 操作符(当类型推断失效则需手动指定类型): " ::<SpecificType> "
    d. 在 Rust 中还有一种特别的泛型即"生命周期参数"

*/
fn foo<T>(x: T) -> T {
    x
}
fn main() {
    /* // 泛型在编译期根据调用位置静态分发为不同类型(其类型可通过上下文信息推断)：
          // 传入数字类型的被系统默认推断为" i32 "类型
          fn foo_1(x: i32) -> i32 {
              x
          }
          // 传入字符串字面量的被默认推断为静态字符串切片类型
          fn foo_2(x: &'static str) -> &'static str {
              x
          }
     */
    assert_eq!(foo(1), 1);
    assert_eq!(foo("hello"), "hello");
    // turbofish 操作符:" foo(1); "等价于" foo::<i32>::(1); "
    // turbofish 操作符:" foo("hello"); "等价于" foo::<&'static str>::("hello"); "

}

/* // phantom[ˈfæntəm]n.幽灵,幻影
1. 特定类型 ：指专门有特殊用途的类型( Rust 语言中包含两个特殊类型" PhantomData<T> "及" Pin<T> ")
    a. PhantomData <T> : 幻影类型
        一般用于占位或者给 Unsafe Rust 进行安全抽象时使用
    b. Pin<T> : 固定类型
        为支持异步开发而特意引进，防止被引用的值发生移动的类型

2. 小结
    a. Rust 系统分为两大概念 : 类型和行为
       这两个概念相辅相成，为达到 Rust 四大目标(保证内存安全、保证一致性、表达明确语义及零成本抽象表达能力
    b. Rust 中的类型一共包含五大类型：基本数据类型、自定义复合类型、容器类型、泛型及特定类型
       (0). 基本数据类型包含简单的值类型(如"数字、布尔、字符、字符串、切片、元组、指针、Never等")、
       (1). 重点了解 Rust 根据使用场景引入多种字符串类型以及切片和字符串切片,动态大小类型常用形式为胖指针
            引用。
       (2). Never 类型实际上是一种不返回任何值的计算类型，可以和其它任意类型合一
       (3). 自定义复合类型重点了解结构体的三种类型及结构体内存对齐规则(默认情况下 Rust 编译器会对结构体字段
            重排[为优化空间占用],亦可通过内存布局属性指定结构体采用 C 语言布局来阻止编译器重排[可手动调整
            顺序进行优化])、枚举体与联合体的内存对齐方式
       (4). 容器类型：可共享内部可变容器，Cell 及 RefCell 皆是基于 UnsafeCell 类型来实现，UnsafeCell 是
            Safe Rust 中唯一合法的可以把不可变引用转化为可变指针的容器
   c. 泛型: 静态分发及通过 turbofish 操作符来指定具体类型，生命周期参数即是特殊泛型
   d. 特定类型包含幻影类型 PhantomData 及固定类型 Pin

3. 小作业：
    请自行阅读标准库文档，按课程中的类型分类梳理一遍类型

 */