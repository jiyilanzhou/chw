
/* 智能指针:
1、指针是一个包含内存地址的变量。此地址指向一些其它数据。智能指针是一类数据结构其表现类似于指针
   但也拥有额外的元数据，最明显的，它们拥有一个引用计数。引用计数记录智能指针总共有多少个所有者，
   并且当没有任何所有者时清除数据。普通引用和智能指针的一个额外区别是:引用只是仅借用数据的指针，
   而智能指针则是拥有它们指向的数据。

2. 智能指针常用结构体实现。智能指针区别于常规结构体的显著特征在于其实现了 Deref 和 Drop trait.
    a. Deref trait 允许智能指针结构体实例表现像引用一样，这样就可以编写即用于引用，又用于智能
       指针的代码
    b. Drop trait 允许自定义当智能指针离开作用域时执行的代码

3. 几个标准库中的智能指针
    a. Box<T> : 用于在堆上分配
    b. Rc<T> : 一个引用计数类型，其数据可以有多个所有者
    c. Ref<T> 和 RefMut<T> :通过 RefCell<T> 访问，一个在运行时而不是在编译时执行借用规则的类型。

*/

/*
1、最简单最直接的智能指针是 box，其类型为 Box<T>。"box"允许将值放在堆上而不是栈上，留着栈上的
   则是指向堆数据的指针。除了数据被存储在堆上外，box 没有任何性能损失。

2、box适合用于如下场景：
    (1)当有一个在编译时未知大小的类型，而又需要在确切大小的上下文中使用这个类型值的时候；
      （举例子：在一个 list 环境下，存放数据，但是每个元素的大小在编译时又不确定）
    (2)当有大量数据并希望在确保数据不被拷贝的情况下转移所有权的时候；
    (3)当希望拥有一个值并只关心它的类型是否实现了特定 trait 而不是其具体类型时。

*/

fn main() {
    // b 存储于栈上指向堆上 5 所在的存储内存
    let b = Box::new(5);
    println!("b = {}", b);
}
