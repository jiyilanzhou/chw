
/*
0. Rust 标准库
    std 默认可用于所有 crate 故可通过 use 路径访问标准库

1. 标准库阅读方式
    a. 若已知要查找的名称,则最快的查找方法即是使用页面顶部的搜索栏，否则可能需
       从"std::* module、primitive types、Standard macros"及"Rust Prelude"
       中查找
    b. 开发阶段按需折叠页面顶部 [-] 及其附近按钮为更可浏览的视图。当查看该 [-]
       按钮时也请注意 [src] 按钮( Rust 的 API 文档附带源代码建议阅读[标准库的
       资源是高质量的，通常可增进和启发对设计实现了解)

2. 标准库文档
    a. Rust 标准库分为多个重点模块(这些模块是所有 Rust 锻造的基石，模块文档通常
       包括模块概述和示例，是开始熟悉该库的明智之地)
    b. 记录原始类型的隐式方法
    c. 标准库定义了 Rust Prelude 其被导入到每个板条箱的每个模块中( Prelude 特征
       无处不在，这亦使得其成为一个很好的学习切入点)
    d. 标准库导出许多标准宏(默认情况下会将标准宏导入所有板条箱中[类比 Prelude ])

3. Rust 标准库之旅
    a. 容器和集合
       （0). option/result 模块定义"选项及错误处理类型"(Option<T>/Result<T,E>)
        (1). iter 模块定义迭代器特征( Iterator 与 for 循环一起使用以访问集合)
    b. 标准库公开三种" 处理内存连续区域 "的常用方法：
        (0). Vec<T> : 在运行时可调整大小的堆分配向量
        (1). [T; n] : 在编译时具有固定大小的嵌入式数组
        (2). [T] : 动态调整大小的切片(可嵌入任何其它类型的连续存储中[无论是否进行
                   堆分配])
    c. 平台抽象和 I/O
        标准库亦关注抽象通用平台(尤其是 Windows 和 Unix 派生平台)中的差异:
        (0). I/O 常用类型(包括 files、TCP、UDP )被定义在" io、fs 及 net "模块
        (1). thread 模块包含 Rust 的线程抽象
        (2). sync 模块包含原始共享内存类型，包括 atomic 及 mpsc (即用于消息传递
             的通道类型)
    d. 重导出
        pub use core::arch;

 */